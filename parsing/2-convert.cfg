/*
// Aim : To use an IOGAM to convert variable types
//
// Explanation here: https://charlieboswell.wixsite.com/dooneteachone/post/parsing-data-with-types
//
*/

$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +Clock = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }

	+Constants = {
	    Class = ConstantGAM
	    OutputSignals = {
		Sixteen = {
		    Type = int16
		    NumberOfElements = 1
		    NumberOfDimensions = 1
		    DataSource = DDB1
		    Default = {30000}
		}
	    }
	}

	+Parse = {
	    Class = IOGAM
	    InputSignals = {
		Sixteen = {
		    Type = int16
                    NumberOfElements = 1
                    DataSource = DDB1
		}
	    }
	    OutputSignals = {
		Eight = {
		    Type = int8
                    NumberOfElements = 2
                    DataSource = DDB1
		}
	    }
	}

        +Print = {
            Class = IOGAM
            InputSignals = {
		Eight = {
		    Type = int8
                    NumberOfElements = 2
                    DataSource = DDB1
		}
            }
            OutputSignals = {
                Eight = {
		    Type = int8
                    NumberOfElements = 2
                    DataSource = LoggerDataSource
		}
            }
        }
    }

    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
    }

    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x000000FF
                    Functions = {Clock Constants Parse Print}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
